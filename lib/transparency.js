// Generated by CoffeeScript 1.3.3
(function() {
  var __slice = [].slice,
    __hasProp = {}.hasOwnProperty;

  (function(root, factory) {
    if (typeof define !== "undefined" && define !== null ? define.amd : void 0) {
      return define(factory);
    } else if (typeof module !== "undefined" && module !== null ? module.exports : void 0) {
      return module.exports = factory();
    } else {
      return root.Transparency = factory();
    }
  })(this, function() {
    var $, ELEMENT_NODE, Instance, TEXT_NODE, attr, cloneNode, consoleLogger, data, empty, expando, exports, fixPieClones, getElementsAndChildNodes, getText, html5Clone, isDate, isDomElement, isIeCompatibilityMode, isPlainValue, log, matcher, matchingElements, nullLogger, piecounter, prepareContext, register, render, renderDirectives, setHtml, setText, _base, _ref, _ref1;
    register = function($) {
      return $.fn.render = function(models, directives, config) {
        var context, _i, _len;
        for (_i = 0, _len = this.length; _i < _len; _i++) {
          context = this[_i];
          render(context, models, directives, config);
        }
        return this;
      };
    };
    if (this.jQuery != null) {
      $ = this.jQuery;
      register($);
    }
    piecounter = 0;
    expando = 'transparency';
    data = function(element) {
      return element[expando] || (element[expando] = {});
    };
    nullLogger = function() {};
    consoleLogger = function() {
      var m, messages, _i, _len, _results;
      messages = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      _results = [];
      for (_i = 0, _len = messages.length; _i < _len; _i++) {
        m = messages[_i];
        _results.push(console.log(m));
      }
      return _results;
    };
    log = nullLogger;
    render = function(context, models, directives, config) {
      var children, contextData, e, element, index, instance, key, model, parent, sibling, value, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref, _ref1, _ref2;
      log = (config != null ? config.debug : void 0) && (typeof console !== "undefined" && console !== null) ? consoleLogger : nullLogger;
      log("Context:", context, "Models:", models, "Directives:", directives, "Config:", config);
      if (!context) {
        return;
      }
      models || (models = []);
      directives || (directives = {});
      if (!Array.isArray(models)) {
        models = [models];
      }
      parent = context.parentNode;
      if (parent) {
        sibling = context.nextSibling;
        parent.removeChild(context);
      }
      prepareContext(context, models);
      contextData = data(context);
      for (index = _i = 0, _len = models.length; _i < _len; index = ++_i) {
        model = models[index];
        children = [];
        instance = contextData.instances[index];
        log("Model:", model, "Template instance for the model:", instance);
        _ref = instance.elements;
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          e = _ref[_j];
          data(e).model = model;
        }
        if (isDomElement(model) && (element = instance.elements[0])) {
          empty(element).appendChild(model);
        } else if (typeof model === 'object') {
          for (key in model) {
            if (!__hasProp.call(model, key)) continue;
            value = model[key];
            if (value != null) {
              if (isPlainValue(value)) {
                _ref1 = matchingElements(instance, key);
                for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
                  element = _ref1[_k];
                  if (element.nodeName.toLowerCase() === 'input') {
                    attr(element, 'value', value);
                  } else {
                    attr(element, 'text', value);
                  }
                }
              } else if (typeof value === 'object') {
                children.push(key);
              }
            }
          }
        }
        renderDirectives(instance, model, index, directives);
        for (_l = 0, _len3 = children.length; _l < _len3; _l++) {
          key = children[_l];
          _ref2 = matchingElements(instance, key);
          for (_m = 0, _len4 = _ref2.length; _m < _len4; _m++) {
            element = _ref2[_m];
            render(element, model[key], directives[key], config);
          }
        }
      }
      if (parent) {
        if (sibling) {
          parent.insertBefore(context, sibling);
        } else {
          parent.appendChild(context);
        }
      }
      return context;
    };
    prepareContext = function(context, models) {
      var contextData, instance, n, _i, _len, _ref, _results;
      contextData = data(context);
      if (!contextData.template) {
        contextData.template = cloneNode(context);
        contextData.instanceCache = [];
        contextData.instances = [new Instance(context)];
      }
      log("Template", contextData.template);
      while (models.length > contextData.instances.length) {
        instance = contextData.instanceCache.pop() || new Instance(cloneNode(contextData.template));
        _ref = instance.childNodes;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          n = _ref[_i];
          context.appendChild(n);
        }
        contextData.instances.push(instance);
      }
      _results = [];
      while (models.length < contextData.instances.length) {
        contextData.instanceCache.push(instance = contextData.instances.pop());
        _results.push((function() {
          var _j, _len1, _ref1, _results1;
          _ref1 = instance.childNodes;
          _results1 = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            n = _ref1[_j];
            _results1.push(n.parentNode.removeChild(n));
          }
          return _results1;
        })());
      }
      return _results;
    };
    Instance = (function() {

      function Instance(template) {
        this.template = template;
        this.queryCache = {};
        this.elements = [];
        this.childNodes = [];
        getElementsAndChildNodes(this.template, this.elements, this.childNodes);
      }

      return Instance;

    })();
    getElementsAndChildNodes = function(template, elements, childNodes) {
      var child, _results;
      child = template.firstChild;
      _results = [];
      while (child) {
        if (childNodes != null) {
          childNodes.push(child);
        }
        if (child.nodeType === ELEMENT_NODE) {
          elements.push(child);
          getElementsAndChildNodes(child, elements);
        }
        _results.push(child = child.nextSibling);
      }
      return _results;
    };
    renderDirectives = function(instance, model, index, directives) {
      var attribute, attributes, directive, element, key, value, _results;
      if (!directives) {
        return;
      }
      model = typeof model === 'object' ? model : {
        value: model
      };
      _results = [];
      for (key in directives) {
        if (!__hasProp.call(directives, key)) continue;
        attributes = directives[key];
        if (typeof attributes !== 'object') {
          throw new Error("Directive syntax is directive[element][attribute] = function(params)");
        }
        _results.push((function() {
          var _i, _len, _ref, _results1;
          _ref = matchingElements(instance, key);
          _results1 = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            element = _ref[_i];
            _results1.push((function() {
              var _results2;
              _results2 = [];
              for (attribute in attributes) {
                directive = attributes[attribute];
                if (!(typeof directive === 'function')) {
                  continue;
                }
                value = directive.call(model, {
                  element: element,
                  index: index,
                  value: attr(element, attribute)
                });
                _results2.push(attr(element, attribute, value));
              }
              return _results2;
            })());
          }
          return _results1;
        })());
      }
      return _results;
    };
    setHtml = function(element, html) {
      var child, elementData, n, _i, _len, _ref, _results;
      elementData = data(element);
      if (elementData.html === html) {
        return;
      }
      elementData.html = html;
      elementData.children || (elementData.children = (function() {
        var _i, _len, _ref, _results;
        _ref = element.childNodes;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          n = _ref[_i];
          if (n.nodeType === ELEMENT_NODE) {
            _results.push(n);
          }
        }
        return _results;
      })());
      empty(element);
      element.innerHTML = html;
      _ref = elementData.children;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        _results.push(element.appendChild(child));
      }
      return _results;
    };
    setText = function(element, text) {
      var elementData, textNode;
      elementData = data(element);
      if (!(text != null) || elementData.text === text) {
        return;
      }
      elementData.text = text;
      textNode = element.firstChild;
      if (!textNode) {
        return element.appendChild(element.ownerDocument.createTextNode(text));
      } else if (textNode.nodeType !== TEXT_NODE) {
        return element.insertBefore(element.ownerDocument.createTextNode(text), textNode);
      } else {
        return textNode.nodeValue = text;
      }
    };
    getText = function(element) {
      var child;
      return ((function() {
        var _i, _len, _ref, _results;
        _ref = element.childNodes;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          child = _ref[_i];
          if (child.nodeType === TEXT_NODE) {
            _results.push(child.nodeValue);
          }
        }
        return _results;
      })()).join('');
    };
    attr = function(element, attribute, value) {
      var elementData, _base, _base1, _base2, _base3;
      if ((value != null) && typeof value !== 'string') {
        value = value.toString();
      }
      elementData = data(element);
      elementData.originalAttributes || (elementData.originalAttributes = {});
      switch (attribute) {
        case 'text':
          (_base = elementData.originalAttributes)['text'] || (_base['text'] = getText(element));
          if (value != null) {
            setText(element, value);
          }
          break;
        case 'html':
          (_base1 = elementData.originalAttributes)['html'] || (_base1['html'] = element.innerHTML);
          if (value != null) {
            setHtml(element, value);
          }
          break;
        case 'class':
          (_base2 = elementData.originalAttributes)['class'] || (_base2['class'] = element.className);
          if (value != null) {
            element.className = value;
          }
          break;
        default:
          (_base3 = elementData.originalAttributes)[attribute] || (_base3[attribute] = element.getAttribute(attribute));
          if (value != null) {
            element.setAttribute(attribute, value);
          }
      }
      if (value != null) {
        return value;
      } else {
        return elementData.originalAttributes[attribute];
      }
    };
    matchingElements = function(instance, key) {
      var e, elements, _base;
      elements = (_base = instance.queryCache)[key] || (_base[key] = (function() {
        var _i, _len, _ref, _results;
        _ref = instance.elements;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          e = _ref[_i];
          if (exports.matcher(e, key)) {
            _results.push(e);
          }
        }
        return _results;
      })());
      log("Matching elements for '" + key + "':", elements);
      return elements;
    };
    matcher = function(element, key) {
      return element.id === key || element.className.split(' ').indexOf(key) > -1 || element.name === key || element.getAttribute('data-bind') === key;
    };
    empty = function(element) {
      var child;
      while (child = element.firstChild) {
        element.removeChild(child);
      }
      return element;
    };
    ELEMENT_NODE = 1;
    TEXT_NODE = 3;
    html5Clone = function() {
      return document.createElement("nav").cloneNode(true).outerHTML !== "<:nav></:nav>";
    };
    isIeCompatibilityMode = function() {
      var _ref;
      return (typeof window !== "undefined" && window !== null ? (_ref = window.navigator) != null ? _ref.appName : void 0 : void 0) === "Microsoft Internet Explorer" && document.documentMode < 9;
    };
    cloneNode = (!(typeof document !== "undefined" && document !== null) || html5Clone()) && !isIeCompatibilityMode() ? (console.log(isIeCompatibilityMode()), function(node) {
      return node.cloneNode(true);
    }) : function(node) {
      var clone, element, _i, _len, _ref;
      clone = $(node).clone()[0];
      fixPieClones(clone);
      if (clone.nodeType === ELEMENT_NODE) {
        clone.removeAttribute(expando);
        _ref = clone.getElementsByTagName('*');
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          element = _ref[_i];
          element.removeAttribute(expando);
        }
      }
      return clone;
    };
    if ((_ref = Array.isArray) == null) {
      Array.isArray = function(obj) {
        return $.isArray(obj);
      };
    }
    if ((_ref1 = (_base = Array.prototype).indexOf) == null) {
      _base.indexOf = function(obj) {
        return $.inArray(obj, this);
      };
    }
    isDate = function(obj) {
      return Object.prototype.toString.call(obj) === '[object Date]';
    };
    isDomElement = function(obj) {
      return (obj != null ? obj.nodeType : void 0) === ELEMENT_NODE;
    };
    isPlainValue = function(obj) {
      return isDate(obj) || typeof obj !== 'object' && typeof obj !== 'function';
    };
    fixPieClones = function(obj) {
      var pie_id;
      pie_id = $(obj).attr('_pieId');
      if (pie_id) {
        $(obj).attr('_pieId', pie_id + ("_" + piecounter));
        piecounter++;
      }
      return $(obj).find('*[_pieId]').each(function(i, item) {
        var desc_pie_id;
        desc_pie_id = $(item).attr('_pieId');
        $(item).attr('_pieId', desc_pie_id + ("_" + piecounter));
        return piecounter++;
      });
    };
    return exports = {
      render: render,
      register: register,
      matcher: matcher
    };
  });

}).call(this);
